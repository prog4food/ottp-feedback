package main

import (
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	"github.com/rs/zerolog/log"
	tele "gopkg.in/telebot.v3"
	"gopkg.in/telebot.v3/react"
)

var (
	Bot        *tele.Bot
	BotId      int64
	Chat       *DummyChat
	ChatMap    *ChatMap_t
	ListBan    map[int64]struct{} = make(map[int64]struct{})
	ListIgnore map[int64]struct{} = make(map[int64]struct{})

	reactEdited tele.ReactionOptions = react.React(tele.Reaction{Type: "emoji", Emoji: "‚úç"})
	reactSended tele.ReactionOptions = react.React(tele.Reaction{Type: "emoji", Emoji: "üïä"})
)

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Å–±–æ—Ä–∫–µ
var depl_ver = "[devel]"

// signal handler
func signalHandler(signal os.Signal) {
	log.Warn().Msgf("Caught signal: %+v", signal)
	isTermSignal := false

	switch signal {

	case syscall.SIGHUP,
		syscall.SIGINT,
		syscall.SIGTERM,
		syscall.SIGQUIT:
		isTermSignal = true
	default:
		log.Error().Msgf("Unknown signal: %+v", signal)
	}

	if isTermSignal {
		log.Info().Msg("Shutdown...")
		os.Exit(0)
	}
}

// initialize signal handler
func initSignals() {
	captureSignal := make(chan os.Signal, 1)
	signal.Notify(captureSignal, syscall.SIGINT, syscall.SIGTERM, syscall.SIGABRT)
	signalHandler(<-captureSignal)
}

func main() {
	var err error
	InitLogger("OTT-play FOSS feeedback bot", depl_ver, false)
	read_config()

	// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
	Chat = &DummyChat{ID: strconv.FormatInt(–°onf.AdminChat, 10)}
	ChatMap = NewChatMap()

	var pooler tele.Poller
	allowedupdates := []string{"message", "edited_message"}
	if –°onf.WebhookListen != "" && –°onf.WebhookUrl != "" {
		// –í –∫–æ–Ω—Ñ–∏–≥–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã WebHook, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
		pooler = &tele.Webhook{
			Listen:         –°onf.WebhookListen,
			Endpoint:       &tele.WebhookEndpoint{PublicURL: –°onf.WebhookUrl},
			AllowedUpdates: allowedupdates,
		}
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π LongPoller
		pooler = &tele.LongPoller{
			Timeout:        10 * time.Second,
			AllowedUpdates: allowedupdates,
		}
	}

	pref := tele.Settings{
		Token: –°onf.BotToken, Poller: pooler,
		// Verbose: true,
	}

	Bot, err = tele.NewBot(pref)
	if err != nil {
		log.Fatal().Err(err)
		return
	}

	// –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Webhook, —Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
	switch Bot.Poller.(type) {
	case *tele.Webhook:
		log.Info().Msg("Working in WebHook mode")
	default:
		log.Info().Msg("Working in Poller mode")
		Bot.RemoveWebhook(false)
	}

	// –ï—Å–ª–∏ AdminChat –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–æ –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—á–∞–µ–º  –∞–∫—Ç–∏–≤–Ω—ã–º chat_id
	if –°onf.AdminChat == 0 {
		log.Warn().Msg("AdminChat is empty. The bot will respond current chat_id to all messages!")
		Bot.Handle(tele.OnText, func(c tele.Context) error {
			return c.Reply("Current chat_id=<code>"+strconv.FormatInt(c.Chat().ID, 10)+"</code>", tele.ModeHTML)
		})
		Bot.Start()
		return
	}
	go initSignals()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	BotId = Bot.Me.ID
	InitCommandsMenu()

	_register_std_bot_handle := func(tgAction string, addReact *tele.ReactionOptions) {
		Bot.Handle(tgAction, func(c tele.Context) error {
			// fmt.Printf("%+v\n", c)
			log.Debug().Msgf("message from %d [%s]", c.Message().Sender.ID, tgAction)
			chat := c.Chat()
			if chat.ID == –°onf.AdminChat {
				return chat_admin(c, addReact)
			}
			// –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É
			if chat.Type == tele.ChatPrivate {
				return chat_user(c, addReact)
			}
			return nil
		})
	}

	// –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞:
	_register_std_bot_handle(tele.OnText, nil)      // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	_register_std_bot_handle(tele.OnPhoto, nil)     // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
	_register_std_bot_handle(tele.OnDocument, nil)  // –î–æ–∫—É–º–µ–Ω—Ç—ã
	_register_std_bot_handle(tele.OnAudio, nil)     // –ê—É–¥–∏–æ –∑–∞–ø–∏—Å–∏
	_register_std_bot_handle(tele.OnVoice, nil)     // –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	_register_std_bot_handle(tele.OnVideo, nil)     // –í–∏–¥–µ–æ
	_register_std_bot_handle(tele.OnVideoNote, nil) // –ö—Ä—É–∂–æ—á–∫–∏
	_register_std_bot_handle(tele.OnContact, nil)   // –ö–æ–Ω—Ç–∞–∫—Ç—ã
	_register_std_bot_handle(tele.OnLocation, nil)  // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
	_register_std_bot_handle(tele.OnAnimation, nil) // –ì–∏—Ñ–∫–∏
	_register_std_bot_handle(tele.OnSticker, nil)   // –°—Ç–∏–∫–µ—Ä—ã
	// _register_std_bot_handle(tele.OnVenue, nil)    // –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
	// _register_std_bot_handle(tele.OnPoll, nil)     // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	_register_std_bot_handle(tele.OnEdited, &reactEdited) // –°—Ç–∏–∫–µ—Ä—ã

	Bot.Start()
}
