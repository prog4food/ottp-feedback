package main

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/rs/zerolog/log"
	tele "gopkg.in/telebot.v3"
)

func get_or_create_topic(message *tele.Message, force bool) int {
	sender_id := message.Sender.ID
	topic_id := ChatMap.GetMsgTopic(sender_id)
	if topic_id == 0 || force == true {
		topic_msg, err := Bot.Send(
			Chat,
			fmt.Sprintf("\nüí¨ <code>%d</code>\nuser: @%s\nname: <code>%s %s</code>", sender_id, message.Sender.Username, message.Sender.FirstName, message.Sender.LastName),
			tele.ModeHTML,
		)
		if err != nil {
			log.Error().Err(err).Msg("sending topic message")
		} else {
			topic_id = topic_msg.ID
			ChatMap.Pair(sender_id, topic_id)
		}
	}
	return topic_id
}

func chat_user(c tele.Context, addReact *tele.ReactionOptions) error {
	var err error
	message := c.Message()
	user_id := message.Sender.ID

	var ok bool
	// –ò–≥–Ω–æ—Ä –ª–∏—Å—Ç
	_, ok = ListIgnore[user_id]
	if ok {
		return nil
	}
	// –ë–∞–Ω –ª–∏—Å—Ç
	_, ok = ListBan[user_id]
	if ok {
		return c.Send(–°onfMsg.UsrBanned, tele.ModeHTML)
	}

	var new_message *tele.Message
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ø–∏–∫, –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
	topic_id := get_or_create_topic(message, false)
	// –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∏—Å–∫–∏–π —á–∞—Ç
	new_message, err = Bot.Copy(Chat, message, &tele.SendOptions{
		ReplyTo: &tele.Message{ID: topic_id},
	})
	if err != nil && strings.Contains(err.Error(), "message to be replied not found") {
		log.Warn().Msg("message to be replied not found, try to open new topic")
		// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫, –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
		topic_id = get_or_create_topic(message, true)
		new_message, err = Bot.Copy(Chat, message, &tele.SendOptions{
			ReplyTo: &tele.Message{ID: topic_id},
			// AllowWithoutReply: true,
		})
	}
	if err != nil {
		log.Error().Err(err).Msg("user_chat: copyMessage to admin_chat")
		return err
	}

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–µ –∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
	if addReact != nil {
		err = Bot.React(Chat, &tele.StoredMessage{MessageID: strconv.Itoa(new_message.ID)}, *addReact)
		if err != nil {
			log.Error().Err(err).Msg("user_chat: addReact to admin_chat")
		}
	}
	if message.LastEdit == 0 {
		// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ (LastEdit == 0)
		// –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–º–µ—Ç–∏–≤ –µ–≥–æ reactSended
		err = Bot.React(message.Chat, message, reactSended)
		if err != nil {
			log.Error().Err(err).Msg("user_chat: reactSended")
		}
	}
	return nil
}
